#ifndef CPU_H
#define CPU_H

#include <array>
#include <bitset>

#include "cartridge.h"
#include "memory.h"
#include "registers.h"

using namespace std;

class cpu
{
    public:
		cpu(string filename);
		cpu(cartridge &cart);
        virtual ~cpu();
    protected:
		void exicute_instruction(char instruction);
		void ld_reg_to_reg(register_name a, register_name b);
		void ld_mem_to_reg(register_name location, register_name_16 register_with_address);
		void ld_reg_to_mem(register_name_16 register_with_address, register_name value);
    private:
		cartridge cart_;
		memory mem_;
		registers reg_;

		enum jumps_calls {
			JP_a16 = 0xC3,//JP a16 cycles: 3  16 registers: - - - -
			JP__HL_ = 0xE9,//JP (HL) cycles: 1  4 registers: - - - -
			JP_NZ_a16 = 0xC2,//JP NZ,a16 cycles: 3  16/12 registers: - - - -
			JP_NC_a16 = 0xD2,//JP NC,a16 cycles: 3  16/12 registers: - - - -
			JP_C_a16 = 0xDA,//JP C,a16 cycles: 3  16/12 registers: - - - -
			JP_Z_a16 = 0xCA,//JP Z,a16 cycles: 3  16/12 registers: - - - -
			JR_r8 = 0x18,//JR r8 cycles: 2  12 registers: - - - -
			JR_Z_r8 = 0x28,//JR Z,r8 cycles: 2  12/8 registers: - - - -
			JR_NC_r8 = 0x30,//JR NC,r8 cycles: 2  12/8 registers: - - - -
			JR_C_r8 = 0x38,//JR C,r8 cycles: 2  12/8 registers: - - - -
			JR_NZ_r8 = 0x20,//JR NZ,r8 cycles: 2  12/8 registers: - - - -
			RET_NZ = 0xC0,//RET NZ cycles: 1  20/8 registers: - - - -
			RET_Z = 0xC8,//RET Z cycles: 1  20/8 registers: - - - -
			RET_NC = 0xD0,//RET NC cycles: 1  20/8 registers: - - - -
			RET_C = 0xD8,//RET C cycles: 1  20/8 registers: - - - -
			RET = 0xC9,//RET cycles: 1  16 registers: - - - -
			RST_08H = 0xCF,//RST 08H cycles: 1  16 registers: - - - -
			RST_10H = 0xD7,//RST 10H cycles: 1  16 registers: - - - -
			RST_30H = 0xF7,//RST 30H cycles: 1  16 registers: - - - -
			RST_38H = 0xFF,//RST 38H cycles: 1  16 registers: - - - -
			RST_00H = 0xC7,//RST 00H cycles: 1  16 registers: - - - -
			RST_28H = 0xEF,//RST 28H cycles: 1  16 registers: - - - -
			RST_18H = 0xDF,//RST 18H cycles: 1  16 registers: - - - -
			RST_20H = 0xE7,//RST 20H cycles: 1  16 registers: - - - -
			CALL_NC_a16 = 0xD4,//CALL NC,a16 cycles: 3  24/12 registers: - - - -
			CALL_Z_a16 = 0xCC,//CALL Z,a16 cycles: 3  24/12 registers: - - - -
			CALL_a16 = 0xCD,//CALL a16 cycles: 3  24 registers: - - - -
			CALL_NZ_a16 = 0xC4,//CALL NZ,a16 cycles: 3  24/12 registers: - - - -
			CALL_C_a16 = 0xDC,//CALL C,a16 cycles: 3  24/12 registers: - - - -
			RETI = 0xD9//RETI cycles: 1  16 registers: - - - -
		};

		enum load_store_move_8bit{
			LD_C_C = 0x49,//LD C,C cycles: 1  4 registers: - - - -
			LD_E_H = 0x5C,//LD E,H cycles: 1  4 registers: - - - -
			LD_A__DE_ = 0x1A,//LD A,(DE) cycles: 1  8 registers: - - - -
			LD_A__a16_ = 0xFA,//LD A,(a16) cycles: 3  16 registers: - - - -
			LD__DE__A = 0x12,//LD (DE),A cycles: 1  8 registers: - - - -
			LD_E_d8 = 0x1E,//LD E,d8 cycles: 2  8 registers: - - - -
			LD_A_D = 0x7A,//LD A,D cycles: 1  4 registers: - - - -
			LD__HL_PLUS___A = 0x22,//LD (HL+),A cycles: 1  8 registers: - - - -
			LD__C__A = 0xE2,//LD (C),A cycles: 2  8 registers: - - - -
			LD__a16__A = 0xEA,//LD (a16),A cycles: 3  16 registers: - - - -
			LD_H_d8 = 0x26,//LD H,d8 cycles: 2  8 registers: - - - -
			LD_A__C_ = 0xF2,//LD A,(C) cycles: 2  8 registers: - - - -
			LD_B_d8 = 0x06,//LD B,d8 cycles: 2  8 registers: - - - -
			LD_A_A = 0x7F,//LD A,A cycles: 1  4 registers: - - - -
			LD_A__HL_PLUS__ = 0x2A,//LD A,(HL+) cycles: 1  8 registers: - - - -
			LD_A__HL_ = 0x7E,//LD A,(HL) cycles: 1  8 registers: - - - -
			LD_A_L = 0x7D,//LD A,L cycles: 1  4 registers: - - - -
			LD_A_H = 0x7C,//LD A,H cycles: 1  4 registers: - - - -
			LD_L_d8 = 0x2E,//LD L,d8 cycles: 2  8 registers: - - - -
			LD_A_E = 0x7B,//LD A,E cycles: 1  4 registers: - - - -
			LD_D_d8 = 0x16,//LD D,d8 cycles: 2  8 registers: - - - -
			LD__HL_MINUS___A = 0x32,//LD (HL-),A cycles: 1  8 registers: - - - -
			LD_A_C = 0x79,//LD A,C cycles: 1  4 registers: - - - -
			LD_A_B = 0x78,//LD A,B cycles: 1  4 registers: - - - -
			LD__HL__d8 = 0x36,//LD (HL),d8 cycles: 2  12 registers: - - - -
			LD__HL__A = 0x77,//LD (HL),A cycles: 1  8 registers: - - - -
			LD_C_d8 = 0x0E,//LD C,d8 cycles: 2  8 registers: - - - -
			LD_A__HL_MINUS__ = 0x3A,//LD A,(HL-) cycles: 1  8 registers: - - - -
			LD__HL__L = 0x75,//LD (HL),L cycles: 1  8 registers: - - - -
			LD__HL__H = 0x74,//LD (HL),H cycles: 1  8 registers: - - - -
			LD__HL__E = 0x73,//LD (HL),E cycles: 1  8 registers: - - - -
			LD_A_d8 = 0x3E,//LD A,d8 cycles: 2  8 registers: - - - -
			LD__HL__D = 0x72,//LD (HL),D cycles: 1  8 registers: - - - -
			LD_B_B = 0x40,//LD B,B cycles: 1  4 registers: - - - -
			LD_B_C = 0x41,//LD B,C cycles: 1  4 registers: - - - -
			LD_B_D = 0x42,//LD B,D cycles: 1  4 registers: - - - -
			LD_B_E = 0x43,//LD B,E cycles: 1  4 registers: - - - -
			LD_B_H = 0x44,//LD B,H cycles: 1  4 registers: - - - -
			LD_B_L = 0x45,//LD B,L cycles: 1  4 registers: - - - -
			LD_B__HL_ = 0x46,//LD B,(HL) cycles: 1  8 registers: - - - -
			LD_B_A = 0x47,//LD B,A cycles: 1  4 registers: - - - -
			LD_C_B = 0x48,//LD C,B cycles: 1  4 registers: - - - -
			LD_A__BC_ = 0x0A,//LD A,(BC) cycles: 1  8 registers: - - - -
			LD_C_D = 0x4A,//LD C,D cycles: 1  4 registers: - - - -
			LD_C_E = 0x4B,//LD C,E cycles: 1  4 registers: - - - -
			LD_C_H = 0x4C,//LD C,H cycles: 1  4 registers: - - - -
			LD_C_L = 0x4D,//LD C,L cycles: 1  4 registers: - - - -
			LD_C__HL_ = 0x4E,//LD C,(HL) cycles: 1  8 registers: - - - -
			LD_C_A = 0x4F,//LD C,A cycles: 1  4 registers: - - - -
			LD_D_B = 0x50,//LD D,B cycles: 1  4 registers: - - - -
			LD_D_C = 0x51,//LD D,C cycles: 1  4 registers: - - - -
			LD_D_D = 0x52,//LD D,D cycles: 1  4 registers: - - - -
			LD_D_E = 0x53,//LD D,E cycles: 1  4 registers: - - - -
			LD_D_H = 0x54,//LD D,H cycles: 1  4 registers: - - - -
			LD_D_L = 0x55,//LD D,L cycles: 1  4 registers: - - - -
			LD_D__HL_ = 0x56,//LD D,(HL) cycles: 1  8 registers: - - - -
			LD_D_A = 0x57,//LD D,A cycles: 1  4 registers: - - - -
			LD_E_B = 0x58,//LD E,B cycles: 1  4 registers: - - - -
			LD_E_C = 0x59,//LD E,C cycles: 1  4 registers: - - - -
			LD_E_D = 0x5A,//LD E,D cycles: 1  4 registers: - - - -
			LD_E_E = 0x5B,//LD E,E cycles: 1  4 registers: - - - -
			LD__BC__A = 0x02,//LD (BC),A cycles: 1  8 registers: - - - -
			LD_E_L = 0x5D,//LD E,L cycles: 1  4 registers: - - - -
			LD_E__HL_ = 0x5E,//LD E,(HL) cycles: 1  8 registers: - - - -
			LD_E_A = 0x5F,//LD E,A cycles: 1  4 registers: - - - -
			LD_H_B = 0x60,//LD H,B cycles: 1  4 registers: - - - -
			LD_H_C = 0x61,//LD H,C cycles: 1  4 registers: - - - -
			LD_H_D = 0x62,//LD H,D cycles: 1  4 registers: - - - -
			LD_H_E = 0x63,//LD H,E cycles: 1  4 registers: - - - -
			LD_H_H = 0x64,//LD H,H cycles: 1  4 registers: - - - -
			LD_H_L = 0x65,//LD H,L cycles: 1  4 registers: - - - -
			LD_H__HL_ = 0x66,//LD H,(HL) cycles: 1  8 registers: - - - -
			LD_H_A = 0x67,//LD H,A cycles: 1  4 registers: - - - -
			LD_L_B = 0x68,//LD L,B cycles: 1  4 registers: - - - -
			LD_L_C = 0x69,//LD L,C cycles: 1  4 registers: - - - -
			LD_L_D = 0x6A,//LD L,D cycles: 1  4 registers: - - - -
			LD_L_E = 0x6B,//LD L,E cycles: 1  4 registers: - - - -
			LD_L_H = 0x6C,//LD L,H cycles: 1  4 registers: - - - -
			LD_L_L = 0x6D,//LD L,L cycles: 1  4 registers: - - - -
			LD_L__HL_ = 0x6E,//LD L,(HL) cycles: 1  8 registers: - - - -
			LD_L_A = 0x6F,//LD L,A cycles: 1  4 registers: - - - -
			LD__HL__B = 0x70,//LD (HL),B cycles: 1  8 registers: - - - -
			LD__HL__C = 0x71,//LD (HL),C cycles: 1  8 registers: - - - -
			LDH__a8__A = 0xE0,//LDH (a8),A cycles: 2  12 registers: - - - -
			LDH_A__a8_ = 0xF0//LDH A,(a8) cycles: 2  12 registers: - - - -
		};

		enum load_store_move_16bit{
			LD_DE_d16 = 0x11,//LD DE,d16 cycles: 3  12 registers: - - - -
			LD_HL_d16 = 0x21,//LD HL,d16 cycles: 3  12 registers: - - - -
			LD__a16__SP = 0x08,//LD (a16),SP cycles: 3  20 registers: - - - -
			LD_SP_d16 = 0x31,//LD SP,d16 cycles: 3  12 registers: - - - -
			LD_BC_d16 = 0x01,//LD BC,d16 cycles: 3  12 registers: - - - -
			LD_SP_HL = 0xF9,//LD SP,HL cycles: 1  8 registers: - - - -
			LD_HL_SP_r8 = 0xF8,//LD HL,SP+r8 cycles: 2  12 registers: 0 0 H C
			POP_HL = 0xE1,//POP HL cycles: 1  12 registers: - - - -
			POP_AF = 0xF1,//POP AF cycles: 1  12 registers: Z N H C
			POP_BC = 0xC1,//POP BC cycles: 1  12 registers: - - - -
			POP_DE = 0xD1,//POP DE cycles: 1  12 registers: - - - -
			PUSH_AF = 0xF5,//PUSH AF cycles: 1  16 registers: - - - -
			PUSH_DE = 0xD5,//PUSH DE cycles: 1  16 registers: - - - -
			PUSH_BC = 0xC5,//PUSH BC cycles: 1  16 registers: - - - -
			PUSH_HL = 0xE5//PUSH HL cycles: 1  16 registers: - - - -
		};

		enum arithmetic_logical_8bit{
			CP_L = 0xBD,//CP L cycles: 1  4 registers: Z 1 H C
			CP_D = 0xBA,//CP D cycles: 1  4 registers: Z 1 H C
			CP_E = 0xBB,//CP E cycles: 1  4 registers: Z 1 H C
			CP_H = 0xBC,//CP H cycles: 1  4 registers: Z 1 H C
			CP_C = 0xB9,//CP C cycles: 1  4 registers: Z 1 H C
			CP__HL_ = 0xBE,//CP (HL) cycles: 1  8 registers: Z 1 H C
			CP_B = 0xB8,//CP B cycles: 1  4 registers: Z 1 H C
			CP_A = 0xBF,//CP A cycles: 1  4 registers: Z 1 H C
			CP_d8 = 0xFE,//CP d8 cycles: 2  8 registers: Z 1 H C
			OR_L = 0xB5,//OR L cycles: 1  4 registers: Z 0 0 0
			OR_H = 0xB4,//OR H cycles: 1  4 registers: Z 0 0 0
			OR_E = 0xB3,//OR E cycles: 1  4 registers: Z 0 0 0
			OR_D = 0xB2,//OR D cycles: 1  4 registers: Z 0 0 0
			OR_C = 0xB1,//OR C cycles: 1  4 registers: Z 0 0 0
			OR_B = 0xB0,//OR B cycles: 1  4 registers: Z 0 0 0
			OR__HL_ = 0xB6,//OR (HL) cycles: 1  8 registers: Z 0 0 0
			OR_A = 0xB7,//OR A cycles: 1  4 registers: Z 0 0 0
			OR_d8 = 0xF6,//OR d8 cycles: 2  8 registers: Z 0 0 0
			ADC_A__HL_ = 0x8E,//ADC A,(HL) cycles: 1  8 registers: Z 0 H C
			ADC_A_L = 0x8D,//ADC A,L cycles: 1  4 registers: Z 0 H C
			ADC_A_H = 0x8C,//ADC A,H cycles: 1  4 registers: Z 0 H C
			ADC_A_E = 0x8B,//ADC A,E cycles: 1  4 registers: Z 0 H C
			ADC_A_D = 0x8A,//ADC A,D cycles: 1  4 registers: Z 0 H C
			ADC_A_C = 0x89,//ADC A,C cycles: 1  4 registers: Z 0 H C
			ADC_A_d8 = 0xCE,//ADC A,d8 cycles: 2  8 registers: Z 0 H C
			ADC_A_B = 0x88,//ADC A,B cycles: 1  4 registers: Z 0 H C
			ADC_A_A = 0x8F,//ADC A,A cycles: 1  4 registers: Z 0 H C
			ADD_A__HL_ = 0x86,//ADD A,(HL) cycles: 1  8 registers: Z 0 H C
			ADD_A_L = 0x85,//ADD A,L cycles: 1  4 registers: Z 0 H C
			ADD_A_D = 0x82,//ADD A,D cycles: 1  4 registers: Z 0 H C
			ADD_A_C = 0x81,//ADD A,C cycles: 1  4 registers: Z 0 H C
			ADD_A_B = 0x80,//ADD A,B cycles: 1  4 registers: Z 0 H C
			ADD_A_A = 0x87,//ADD A,A cycles: 1  4 registers: Z 0 H C
			ADD_A_d8 = 0xC6,//ADD A,d8 cycles: 2  8 registers: Z 0 H C
			ADD_A_H = 0x84,//ADD A,H cycles: 1  4 registers: Z 0 H C
			ADD_A_E = 0x83,//ADD A,E cycles: 1  4 registers: Z 0 H C
			AND_H = 0xA4,//AND H cycles: 1  4 registers: Z 0 1 0
			AND_A = 0xA7,//AND A cycles: 1  4 registers: Z 0 1 0
			AND_D = 0xA2,//AND D cycles: 1  4 registers: Z 0 1 0
			AND_C = 0xA1,//AND C cycles: 1  4 registers: Z 0 1 0
			AND_B = 0xA0,//AND B cycles: 1  4 registers: Z 0 1 0
			AND_d8 = 0xE6,//AND d8 cycles: 2  8 registers: Z 0 1 0
			AND__HL_ = 0xA6,//AND (HL) cycles: 1  8 registers: Z 0 1 0
			AND_L = 0xA5,//AND L cycles: 1  4 registers: Z 0 1 0
			AND_E = 0xA3,//AND E cycles: 1  4 registers: Z 0 1 0
			CCF = 0x3F,//CCF cycles: 1  4 registers: - 0 0 C
			CPL = 0x2F,//CPL cycles: 1  4 registers: - 1 1 -
			DAA = 0x27,//DAA cycles: 1  4 registers: Z - 0 C
			DEC_D = 0x15,//DEC D cycles: 1  4 registers: Z 1 H -
			DEC_A = 0x3D,//DEC A cycles: 1  4 registers: Z 1 H -
			DEC_L = 0x2D,//DEC L cycles: 1  4 registers: Z 1 H -
			DEC_H = 0x25,//DEC H cycles: 1  4 registers: Z 1 H -
			DEC_B = 0x05,//DEC B cycles: 1  4 registers: Z 1 H -
			DEC_E = 0x1D,//DEC E cycles: 1  4 registers: Z 1 H -
			DEC_C = 0x0D,//DEC C cycles: 1  4 registers: Z 1 H -
			DEC__HL_ = 0x35,//DEC (HL) cycles: 1  12 registers: Z 1 H -
			INC_L = 0x2C,//INC L cycles: 1  4 registers: Z 0 H -
			INC_A = 0x3C,//INC A cycles: 1  4 registers: Z 0 H -
			INC_B = 0x04,//INC B cycles: 1  4 registers: Z 0 H -
			INC_C = 0x0C,//INC C cycles: 1  4 registers: Z 0 H -
			INC__HL_ = 0x34,//INC (HL) cycles: 1  12 registers: Z 0 H -
			INC_D = 0x14,//INC D cycles: 1  4 registers: Z 0 H -
			INC_H = 0x24,//INC H cycles: 1  4 registers: Z 0 H -
			INC_E = 0x1C,//INC E cycles: 1  4 registers: Z 0 H -
			SBC_A_E = 0x9B,//SBC A,E cycles: 1  4 registers: Z 1 H C
			SBC_A_H = 0x9C,//SBC A,H cycles: 1  4 registers: Z 1 H C
			SBC_A_L = 0x9D,//SBC A,L cycles: 1  4 registers: Z 1 H C
			SBC_A_C = 0x99,//SBC A,C cycles: 1  4 registers: Z 1 H C
			SBC_A_B = 0x98,//SBC A,B cycles: 1  4 registers: Z 1 H C
			SBC_A_D = 0x9A,//SBC A,D cycles: 1  4 registers: Z 1 H C
			SBC_A_d8 = 0xDE,//SBC A,d8 cycles: 2  8 registers: Z 1 H C
			SBC_A__HL_ = 0x9E,//SBC A,(HL) cycles: 1  8 registers: Z 1 H C
			SBC_A_A = 0x9F,//SBC A,A cycles: 1  4 registers: Z 1 H C
			SCF = 0x37,//SCF cycles: 1  4 registers: - 0 0 1
			SUB_C = 0x91,//SUB C cycles: 1  4 registers: Z 1 H C
			SUB_D = 0x92,//SUB D cycles: 1  4 registers: Z 1 H C
			SUB_A = 0x97,//SUB A cycles: 1  4 registers: Z 1 H C
			SUB_d8 = 0xD6,//SUB d8 cycles: 2  8 registers: Z 1 H C
			SUB__HL_ = 0x96,//SUB (HL) cycles: 1  8 registers: Z 1 H C
			SUB_L = 0x95,//SUB L cycles: 1  4 registers: Z 1 H C
			SUB_H = 0x94,//SUB H cycles: 1  4 registers: Z 1 H C
			SUB_E = 0x93,//SUB E cycles: 1  4 registers: Z 1 H C
			SUB_B = 0x90,//SUB B cycles: 1  4 registers: Z 1 H C
			XOR_D = 0xAA,//XOR D cycles: 1  4 registers: Z 0 0 0
			XOR_E = 0xAB,//XOR E cycles: 1  4 registers: Z 0 0 0
			XOR_C = 0xA9,//XOR C cycles: 1  4 registers: Z 0 0 0
			XOR_A = 0xAF,//XOR A cycles: 1  4 registers: Z 0 0 0
			XOR_B = 0xA8,//XOR B cycles: 1  4 registers: Z 0 0 0
			XOR_H = 0xAC,//XOR H cycles: 1  4 registers: Z 0 0 0
			XOR__HL_ = 0xAE,//XOR (HL) cycles: 1  8 registers: Z 0 0 0
			XOR_L = 0xAD,//XOR L cycles: 1  4 registers: Z 0 0 0
			XOR_d8 = 0xEE,//XOR d8 cycles: 2  8 registers: Z 0 0 0
		};

		enum arithmetic_logical_16bit{
			ADD_HL_HL = 0x29,//ADD HL,HL cycles: 1  8 registers: - 0 H C
			ADD_HL_SP = 0x39,//ADD HL,SP cycles: 1  8 registers: - 0 H C
			ADD_SP_r8 = 0xE8,//ADD SP,r8 cycles: 2  16 registers: 0 0 H C
			ADD_HL_DE = 0x19,//ADD HL,DE cycles: 1  8 registers: - 0 H C
			ADD_HL_BC = 0x09,//ADD HL,BC cycles: 1  8 registers: - 0 H C
			DEC_SP = 0x3B,//DEC SP cycles: 1  8 registers: - - - -
			DEC_DE = 0x1B,//DEC DE cycles: 1  8 registers: - - - -
			DEC_HL = 0x2B,//DEC HL cycles: 1  8 registers: - - - -
			DEC_BC = 0x0B,//DEC BC cycles: 1  8 registers: - - - -
			INC_DE = 0x13,//INC DE cycles: 1  8 registers: - - - -
			INC_BC = 0x03,//INC BC cycles: 1  8 registers: - - - -
			INC_HL = 0x23,//INC HL cycles: 1  8 registers: - - - -
			INC_SP = 0x33//INC SP cycles: 1  8 registers: - - - -
		};

		enum rotations_shifts_8bit{
			RLA = 0x17,//RLA cycles: 1  4 registers: 0 0 0 C
			RRA = 0x1F,//RRA cycles: 1  4 registers: 0 0 0 C
			RLCA = 0x07,//RLCA cycles: 1  4 registers: 0 0 0 C
			RRCA = 0x0F//RRCA cycles: 1  4 registers: 0 0 0 C
		};

		enum prefix_cb{
			RL_B = 0x10,//RL B cycles: 2  8 registers: Z 0 0 C
			RL_D = 0x12,//RL D cycles: 2  8 registers: Z 0 0 C
			RL_H = 0x14,//RL H cycles: 2  8 registers: Z 0 0 C
			RL_L = 0x15,//RL L cycles: 2  8 registers: Z 0 0 C
			RL__HL_ = 0x16,//RL (HL) cycles: 2  16 registers: Z 0 0 C
			RL_A = 0x17,//RL A cycles: 2  8 registers: Z 0 0 C
			RL_C = 0x11,//RL C cycles: 2  8 registers: Z 0 0 C
			RL_E = 0x13,//RL E cycles: 2  8 registers: Z 0 0 C
			RR_C = 0x19,//RR C cycles: 2  8 registers: Z 0 0 C
			RR_E = 0x1B,//RR E cycles: 2  8 registers: Z 0 0 C
			RR_H = 0x1C,//RR H cycles: 2  8 registers: Z 0 0 C
			RR_L = 0x1D,//RR L cycles: 2  8 registers: Z 0 0 C
			RR__HL_ = 0x1E,//RR (HL) cycles: 2  16 registers: Z 0 0 C
			RR_A = 0x1F,//RR A cycles: 2  8 registers: Z 0 0 C
			RR_B = 0x18,//RR B cycles: 2  8 registers: Z 0 0 C
			RR_D = 0x1A,//RR D cycles: 2  8 registers: Z 0 0 C
			BIT_0_B = 0x40,//BIT 0,B cycles: 2  8 registers: Z 0 1 -
			BIT_0_C = 0x41,//BIT 0,C cycles: 2  8 registers: Z 0 1 -
			BIT_0_D = 0x42,//BIT 0,D cycles: 2  8 registers: Z 0 1 -
			BIT_0_E = 0x43,//BIT 0,E cycles: 2  8 registers: Z 0 1 -
			BIT_0_H = 0x44,//BIT 0,H cycles: 2  8 registers: Z 0 1 -
			BIT_0_L = 0x45,//BIT 0,L cycles: 2  8 registers: Z 0 1 -
			BIT_0__HL_ = 0x46,//BIT 0,(HL) cycles: 2  16 registers: Z 0 1 -
			BIT_0_A = 0x47,//BIT 0,A cycles: 2  8 registers: Z 0 1 -
			BIT_1_B = 0x48,//BIT 1,B cycles: 2  8 registers: Z 0 1 -
			BIT_1_C = 0x49,//BIT 1,C cycles: 2  8 registers: Z 0 1 -
			BIT_1_D = 0x4A,//BIT 1,D cycles: 2  8 registers: Z 0 1 -
			BIT_1_E = 0x4B,//BIT 1,E cycles: 2  8 registers: Z 0 1 -
			BIT_1_H = 0x4C,//BIT 1,H cycles: 2  8 registers: Z 0 1 -
			BIT_1_L = 0x4D,//BIT 1,L cycles: 2  8 registers: Z 0 1 -
			BIT_1__HL_ = 0x4E,//BIT 1,(HL) cycles: 2  16 registers: Z 0 1 -
			BIT_2_B = 0x50,//BIT 2,B cycles: 2  8 registers: Z 0 1 -
			BIT_2_C = 0x51,//BIT 2,C cycles: 2  8 registers: Z 0 1 -
			BIT_2_D = 0x52,//BIT 2,D cycles: 2  8 registers: Z 0 1 -
			BIT_2_E = 0x53,//BIT 2,E cycles: 2  8 registers: Z 0 1 -
			BIT_2_H = 0x54,//BIT 2,H cycles: 2  8 registers: Z 0 1 -
			BIT_2_L = 0x55,//BIT 2,L cycles: 2  8 registers: Z 0 1 -
			BIT_2__HL_ = 0x56,//BIT 2,(HL) cycles: 2  16 registers: Z 0 1 -
			BIT_2_A = 0x57,//BIT 2,A cycles: 2  8 registers: Z 0 1 -
			BIT_1_A = 0x4F,//BIT 1,A cycles: 2  8 registers: Z 0 1 -
			BIT_3_C = 0x59,//BIT 3,C cycles: 2  8 registers: Z 0 1 -
			BIT_3_D = 0x5A,//BIT 3,D cycles: 2  8 registers: Z 0 1 -
			BIT_3_E = 0x5B,//BIT 3,E cycles: 2  8 registers: Z 0 1 -
			BIT_3_H = 0x5C,//BIT 3,H cycles: 2  8 registers: Z 0 1 -
			BIT_3_B = 0x58,//BIT 3,B cycles: 2  8 registers: Z 0 1 -
			BIT_3__HL_ = 0x5E,//BIT 3,(HL) cycles: 2  16 registers: Z 0 1 -
			BIT_3_A = 0x5F,//BIT 3,A cycles: 2  8 registers: Z 0 1 -
			BIT_4_B = 0x60,//BIT 4,B cycles: 2  8 registers: Z 0 1 -
			BIT_4_C = 0x61,//BIT 4,C cycles: 2  8 registers: Z 0 1 -
			BIT_4_D = 0x62,//BIT 4,D cycles: 2  8 registers: Z 0 1 -
			BIT_4_E = 0x63,//BIT 4,E cycles: 2  8 registers: Z 0 1 -
			BIT_4_H = 0x64,//BIT 4,H cycles: 2  8 registers: Z 0 1 -
			BIT_4_L = 0x65,//BIT 4,L cycles: 2  8 registers: Z 0 1 -
			BIT_4__HL_ = 0x66,//BIT 4,(HL) cycles: 2  16 registers: Z 0 1 -
			BIT_4_A = 0x67,//BIT 4,A cycles: 2  8 registers: Z 0 1 -
			BIT_5_B = 0x68,//BIT 5,B cycles: 2  8 registers: Z 0 1 -
			BIT_5_C = 0x69,//BIT 5,C cycles: 2  8 registers: Z 0 1 -
			BIT_5_D = 0x6A,//BIT 5,D cycles: 2  8 registers: Z 0 1 -
			BIT_5_E = 0x6B,//BIT 5,E cycles: 2  8 registers: Z 0 1 -
			BIT_5_H = 0x6C,//BIT 5,H cycles: 2  8 registers: Z 0 1 -
			BIT_5_L = 0x6D,//BIT 5,L cycles: 2  8 registers: Z 0 1 -
			BIT_5__HL_ = 0x6E,//BIT 5,(HL) cycles: 2  16 registers: Z 0 1 -
			BIT_5_A = 0x6F,//BIT 5,A cycles: 2  8 registers: Z 0 1 -
			BIT_6_B = 0x70,//BIT 6,B cycles: 2  8 registers: Z 0 1 -
			BIT_6_C = 0x71,//BIT 6,C cycles: 2  8 registers: Z 0 1 -
			BIT_6_D = 0x72,//BIT 6,D cycles: 2  8 registers: Z 0 1 -
			BIT_6_E = 0x73,//BIT 6,E cycles: 2  8 registers: Z 0 1 -
			BIT_6_H = 0x74,//BIT 6,H cycles: 2  8 registers: Z 0 1 -
			BIT_6_L = 0x75,//BIT 6,L cycles: 2  8 registers: Z 0 1 -
			BIT_6__HL_ = 0x76,//BIT 6,(HL) cycles: 2  16 registers: Z 0 1 -
			BIT_6_A = 0x77,//BIT 6,A cycles: 2  8 registers: Z 0 1 -
			BIT_7_B = 0x78,//BIT 7,B cycles: 2  8 registers: Z 0 1 -
			BIT_7_C = 0x79,//BIT 7,C cycles: 2  8 registers: Z 0 1 -
			BIT_7_D = 0x7A,//BIT 7,D cycles: 2  8 registers: Z 0 1 -
			BIT_7_E = 0x7B,//BIT 7,E cycles: 2  8 registers: Z 0 1 -
			BIT_7_H = 0x7C,//BIT 7,H cycles: 2  8 registers: Z 0 1 -
			BIT_7_L = 0x7D,//BIT 7,L cycles: 2  8 registers: Z 0 1 -
			BIT_7__HL_ = 0x7E,//BIT 7,(HL) cycles: 2  16 registers: Z 0 1 -
			BIT_7_A = 0x7F,//BIT 7,A cycles: 2  8 registers: Z 0 1 -
			BIT_3_L = 0x5D,//BIT 3,L cycles: 2  8 registers: Z 0 1 -
			RES_5_C = 0xA9,//RES 5,C cycles: 2  8 registers: - - - -
			RES_5_B = 0xA8,//RES 5,B cycles: 2  8 registers: - - - -
			RES_4_A = 0xA7,//RES 4,A cycles: 2  8 registers: - - - -
			RES_4__HL_ = 0xA6,//RES 4,(HL) cycles: 2  16 registers: - - - -
			RES_4_L = 0xA5,//RES 4,L cycles: 2  8 registers: - - - -
			RES_4_H = 0xA4,//RES 4,H cycles: 2  8 registers: - - - -
			RES_4_E = 0xA3,//RES 4,E cycles: 2  8 registers: - - - -
			RES_4_D = 0xA2,//RES 4,D cycles: 2  8 registers: - - - -
			RES_4_C = 0xA1,//RES 4,C cycles: 2  8 registers: - - - -
			RES_4_B = 0xA0,//RES 4,B cycles: 2  8 registers: - - - -
			RES_3_A = 0x9F,//RES 3,A cycles: 2  8 registers: - - - -
			RES_3__HL_ = 0x9E,//RES 3,(HL) cycles: 2  16 registers: - - - -
			RES_3_L = 0x9D,//RES 3,L cycles: 2  8 registers: - - - -
			RES_3_H = 0x9C,//RES 3,H cycles: 2  8 registers: - - - -
			RES_3_E = 0x9B,//RES 3,E cycles: 2  8 registers: - - - -
			RES_3_D = 0x9A,//RES 3,D cycles: 2  8 registers: - - - -
			RES_3_C = 0x99,//RES 3,C cycles: 2  8 registers: - - - -
			RES_3_B = 0x98,//RES 3,B cycles: 2  8 registers: - - - -
			RES_0_B = 0x80,//RES 0,B cycles: 2  8 registers: - - - -
			RES_7__HL_ = 0xBE,//RES 7,(HL) cycles: 2  16 registers: - - - -
			RES_7_L = 0xBD,//RES 7,L cycles: 2  8 registers: - - - -
			RES_7_H = 0xBC,//RES 7,H cycles: 2  8 registers: - - - -
			RES_7_E = 0xBB,//RES 7,E cycles: 2  8 registers: - - - -
			RES_7_D = 0xBA,//RES 7,D cycles: 2  8 registers: - - - -
			RES_7_C = 0xB9,//RES 7,C cycles: 2  8 registers: - - - -
			RES_7_B = 0xB8,//RES 7,B cycles: 2  8 registers: - - - -
			RES_6_A = 0xB7,//RES 6,A cycles: 2  8 registers: - - - -
			RES_6__HL_ = 0xB6,//RES 6,(HL) cycles: 2  16 registers: - - - -
			RES_6_L = 0xB5,//RES 6,L cycles: 2  8 registers: - - - -
			RES_6_H = 0xB4,//RES 6,H cycles: 2  8 registers: - - - -
			RES_6_E = 0xB3,//RES 6,E cycles: 2  8 registers: - - - -
			RES_6_D = 0xB2,//RES 6,D cycles: 2  8 registers: - - - -
			RES_6_C = 0xB1,//RES 6,C cycles: 2  8 registers: - - - -
			RES_7_A = 0xBF,//RES 7,A cycles: 2  8 registers: - - - -
			RES_6_B = 0xB0,//RES 6,B cycles: 2  8 registers: - - - -
			RES_5_A = 0xAF,//RES 5,A cycles: 2  8 registers: - - - -
			RES_5__HL_ = 0xAE,//RES 5,(HL) cycles: 2  16 registers: - - - -
			RES_5_L = 0xAD,//RES 5,L cycles: 2  8 registers: - - - -
			RES_5_H = 0xAC,//RES 5,H cycles: 2  8 registers: - - - -
			RES_5_E = 0xAB,//RES 5,E cycles: 2  8 registers: - - - -
			RES_5_D = 0xAA,//RES 5,D cycles: 2  8 registers: - - - -
			RES_0_C = 0x81,//RES 0,C cycles: 2  8 registers: - - - -
			RES_0_D = 0x82,//RES 0,D cycles: 2  8 registers: - - - -
			RES_0_E = 0x83,//RES 0,E cycles: 2  8 registers: - - - -
			RES_0_H = 0x84,//RES 0,H cycles: 2  8 registers: - - - -
			RES_0_L = 0x85,//RES 0,L cycles: 2  8 registers: - - - -
			RES_0__HL_ = 0x86,//RES 0,(HL) cycles: 2  16 registers: - - - -
			RES_0_A = 0x87,//RES 0,A cycles: 2  8 registers: - - - -
			RES_1_B = 0x88,//RES 1,B cycles: 2  8 registers: - - - -
			RES_1_C = 0x89,//RES 1,C cycles: 2  8 registers: - - - -
			RES_1_D = 0x8A,//RES 1,D cycles: 2  8 registers: - - - -
			RES_1_E = 0x8B,//RES 1,E cycles: 2  8 registers: - - - -
			RES_1_H = 0x8C,//RES 1,H cycles: 2  8 registers: - - - -
			RES_1_L = 0x8D,//RES 1,L cycles: 2  8 registers: - - - -
			RES_1__HL_ = 0x8E,//RES 1,(HL) cycles: 2  16 registers: - - - -
			RES_1_A = 0x8F,//RES 1,A cycles: 2  8 registers: - - - -
			RES_2_B = 0x90,//RES 2,B cycles: 2  8 registers: - - - -
			RES_2_C = 0x91,//RES 2,C cycles: 2  8 registers: - - - -
			RES_2_D = 0x92,//RES 2,D cycles: 2  8 registers: - - - -
			RES_2_E = 0x93,//RES 2,E cycles: 2  8 registers: - - - -
			RES_2_H = 0x94,//RES 2,H cycles: 2  8 registers: - - - -
			RES_2_L = 0x95,//RES 2,L cycles: 2  8 registers: - - - -
			RES_2__HL_ = 0x96,//RES 2,(HL) cycles: 2  16 registers: - - - -
			RES_2_A = 0x97,//RES 2,A cycles: 2  8 registers: - - - -
			RLC_C = 0x01,//RLC C cycles: 2  8 registers: Z 0 0 C
			RLC_D = 0x02,//RLC D cycles: 2  8 registers: Z 0 0 C
			RLC_H = 0x04,//RLC H cycles: 2  8 registers: Z 0 0 C
			RLC_L = 0x05,//RLC L cycles: 2  8 registers: Z 0 0 C
			RLC__HL_ = 0x06,//RLC (HL) cycles: 2  16 registers: Z 0 0 C
			RLC_A = 0x07,//RLC A cycles: 2  8 registers: Z 0 0 C
			RLC_B = 0x00,//RLC B cycles: 2  8 registers: Z 0 0 C
			RLC_E = 0x03,//RLC E cycles: 2  8 registers: Z 0 0 C
			RRC_A = 0x0F,//RRC A cycles: 2  8 registers: Z 0 0 C
			RRC_L = 0x0D,//RRC L cycles: 2  8 registers: Z 0 0 C
			RRC_H = 0x0C,//RRC H cycles: 2  8 registers: Z 0 0 C
			RRC_E = 0x0B,//RRC E cycles: 2  8 registers: Z 0 0 C
			RRC_D = 0x0A,//RRC D cycles: 2  8 registers: Z 0 0 C
			RRC_C = 0x09,//RRC C cycles: 2  8 registers: Z 0 0 C
			RRC_B = 0x08,//RRC B cycles: 2  8 registers: Z 0 0 C
			RRC__HL_ = 0x0E,//RRC (HL) cycles: 2  16 registers: Z 0 0 C
			SET_1_H = 0xCC,//SET 1,H cycles: 2  8 registers: - - - -
			SET_6_A = 0xF7,//SET 6,A cycles: 2  8 registers: - - - -
			SET_6__HL_ = 0xF6,//SET 6,(HL) cycles: 2  16 registers: - - - -
			SET_6_L = 0xF5,//SET 6,L cycles: 2  8 registers: - - - -
			SET_6_H = 0xF4,//SET 6,H cycles: 2  8 registers: - - - -
			SET_6_E = 0xF3,//SET 6,E cycles: 2  8 registers: - - - -
			SET_6_D = 0xF2,//SET 6,D cycles: 2  8 registers: - - - -
			SET_6_C = 0xF1,//SET 6,C cycles: 2  8 registers: - - - -
			SET_6_B = 0xF0,//SET 6,B cycles: 2  8 registers: - - - -
			SET_5_A = 0xEF,//SET 5,A cycles: 2  8 registers: - - - -
			SET_5__HL_ = 0xEE,//SET 5,(HL) cycles: 2  16 registers: - - - -
			SET_5_L = 0xED,//SET 5,L cycles: 2  8 registers: - - - -
			SET_5_H = 0xEC,//SET 5,H cycles: 2  8 registers: - - - -
			SET_5_E = 0xEB,//SET 5,E cycles: 2  8 registers: - - - -
			SET_5_D = 0xEA,//SET 5,D cycles: 2  8 registers: - - - -
			SET_5_C = 0xE9,//SET 5,C cycles: 2  8 registers: - - - -
			SET_5_B = 0xE8,//SET 5,B cycles: 2  8 registers: - - - -
			SET_4_A = 0xE7,//SET 4,A cycles: 2  8 registers: - - - -
			SET_4__HL_ = 0xE6,//SET 4,(HL) cycles: 2  16 registers: - - - -
			SET_4_L = 0xE5,//SET 4,L cycles: 2  8 registers: - - - -
			SET_4_H = 0xE4,//SET 4,H cycles: 2  8 registers: - - - -
			SET_4_E = 0xE3,//SET 4,E cycles: 2  8 registers: - - - -
			SET_4_D = 0xE2,//SET 4,D cycles: 2  8 registers: - - - -
			SET_4_C = 0xE1,//SET 4,C cycles: 2  8 registers: - - - -
			SET_7_A = 0xFF,//SET 7,A cycles: 2  8 registers: - - - -
			SET_7__HL_ = 0xFE,//SET 7,(HL) cycles: 2  16 registers: - - - -
			SET_7_L = 0xFD,//SET 7,L cycles: 2  8 registers: - - - -
			SET_7_H = 0xFC,//SET 7,H cycles: 2  8 registers: - - - -
			SET_7_E = 0xFB,//SET 7,E cycles: 2  8 registers: - - - -
			SET_7_D = 0xFA,//SET 7,D cycles: 2  8 registers: - - - -
			SET_7_C = 0xF9,//SET 7,C cycles: 2  8 registers: - - - -
			SET_7_B = 0xF8,//SET 7,B cycles: 2  8 registers: - - - -
			SET_0_B = 0xC0,//SET 0,B cycles: 2  8 registers: - - - -
			SET_0_C = 0xC1,//SET 0,C cycles: 2  8 registers: - - - -
			SET_0_D = 0xC2,//SET 0,D cycles: 2  8 registers: - - - -
			SET_0_E = 0xC3,//SET 0,E cycles: 2  8 registers: - - - -
			SET_0_H = 0xC4,//SET 0,H cycles: 2  8 registers: - - - -
			SET_0_L = 0xC5,//SET 0,L cycles: 2  8 registers: - - - -
			SET_0__HL_ = 0xC6,//SET 0,(HL) cycles: 2  16 registers: - - - -
			SET_0_A = 0xC7,//SET 0,A cycles: 2  8 registers: - - - -
			SET_1_B = 0xC8,//SET 1,B cycles: 2  8 registers: - - - -
			SET_1_C = 0xC9,//SET 1,C cycles: 2  8 registers: - - - -
			SET_1_D = 0xCA,//SET 1,D cycles: 2  8 registers: - - - -
			SET_1_E = 0xCB,//SET 1,E cycles: 2  8 registers: - - - -
			SET_4_B = 0xE0,//SET 4,B cycles: 2  8 registers: - - - -
			SET_1_L = 0xCD,//SET 1,L cycles: 2  8 registers: - - - -
			SET_1__HL_ = 0xCE,//SET 1,(HL) cycles: 2  16 registers: - - - -
			SET_1_A = 0xCF,//SET 1,A cycles: 2  8 registers: - - - -
			SET_2_B = 0xD0,//SET 2,B cycles: 2  8 registers: - - - -
			SET_2_C = 0xD1,//SET 2,C cycles: 2  8 registers: - - - -
			SET_2_D = 0xD2,//SET 2,D cycles: 2  8 registers: - - - -
			SET_2_E = 0xD3,//SET 2,E cycles: 2  8 registers: - - - -
			SET_2_H = 0xD4,//SET 2,H cycles: 2  8 registers: - - - -
			SET_2_L = 0xD5,//SET 2,L cycles: 2  8 registers: - - - -
			SET_2__HL_ = 0xD6,//SET 2,(HL) cycles: 2  16 registers: - - - -
			SET_2_A = 0xD7,//SET 2,A cycles: 2  8 registers: - - - -
			SET_3_B = 0xD8,//SET 3,B cycles: 2  8 registers: - - - -
			SET_3_C = 0xD9,//SET 3,C cycles: 2  8 registers: - - - -
			SET_3_D = 0xDA,//SET 3,D cycles: 2  8 registers: - - - -
			SET_3_E = 0xDB,//SET 3,E cycles: 2  8 registers: - - - -
			SET_3_H = 0xDC,//SET 3,H cycles: 2  8 registers: - - - -
			SET_3_L = 0xDD,//SET 3,L cycles: 2  8 registers: - - - -
			SET_3__HL_ = 0xDE,//SET 3,(HL) cycles: 2  16 registers: - - - -
			SET_3_A = 0xDF,//SET 3,A cycles: 2  8 registers: - - - -
			SLA_B = 0x20,//SLA B cycles: 2  8 registers: Z 0 0 C
			SLA_D = 0x22,//SLA D cycles: 2  8 registers: Z 0 0 C
			SLA_H = 0x24,//SLA H cycles: 2  8 registers: Z 0 0 C
			SLA_L = 0x25,//SLA L cycles: 2  8 registers: Z 0 0 C
			SLA__HL_ = 0x26,//SLA (HL) cycles: 2  16 registers: Z 0 0 C
			SLA_A = 0x27,//SLA A cycles: 2  8 registers: Z 0 0 C
			SLA_C = 0x21,//SLA C cycles: 2  8 registers: Z 0 0 C
			SLA_E = 0x23,//SLA E cycles: 2  8 registers: Z 0 0 C
			SRA_A = 0x2F,//SRA A cycles: 2  8 registers: Z 0 0 0
			SRA_D = 0x2A,//SRA D cycles: 2  8 registers: Z 0 0 0
			SRA_E = 0x2B,//SRA E cycles: 2  8 registers: Z 0 0 0
			SRA_H = 0x2C,//SRA H cycles: 2  8 registers: Z 0 0 0
			SRA_L = 0x2D,//SRA L cycles: 2  8 registers: Z 0 0 0
			SRA__HL_ = 0x2E,//SRA (HL) cycles: 2  16 registers: Z 0 0 0
			SRA_B = 0x28,//SRA B cycles: 2  8 registers: Z 0 0 0
			SRA_C = 0x29,//SRA C cycles: 2  8 registers: Z 0 0 0
			SRL__HL_ = 0x3E,//SRL (HL) cycles: 2  16 registers: Z 0 0 C
			SRL_L = 0x3D,//SRL L cycles: 2  8 registers: Z 0 0 C
			SRL_H = 0x3C,//SRL H cycles: 2  8 registers: Z 0 0 C
			SRL_E = 0x3B,//SRL E cycles: 2  8 registers: Z 0 0 C
			SRL_D = 0x3A,//SRL D cycles: 2  8 registers: Z 0 0 C
			SRL_C = 0x39,//SRL C cycles: 2  8 registers: Z 0 0 C
			SRL_B = 0x38,//SRL B cycles: 2  8 registers: Z 0 0 C
			SRL_A = 0x3F,//SRL A cycles: 2  8 registers: Z 0 0 C
			SWAP__HL_ = 0x36,//SWAP (HL) cycles: 2  16 registers: Z 0 0 0
			SWAP_A = 0x37,//SWAP A cycles: 2  8 registers: Z 0 0 0
			SWAP_L = 0x35,//SWAP L cycles: 2  8 registers: Z 0 0 0
			SWAP_H = 0x34,//SWAP H cycles: 2  8 registers: Z 0 0 0
			SWAP_E = 0x33,//SWAP E cycles: 2  8 registers: Z 0 0 0
			SWAP_D = 0x32,//SWAP D cycles: 2  8 registers: Z 0 0 0
			SWAP_C = 0x31,//SWAP C cycles: 2  8 registers: Z 0 0 0
			SWAP_B = 0x30//SWAP B cycles: 2  8 registers: Z 0 0 0
		};

		enum misc_control{
			NOP = 0X00,
			STOP = 0X10,
			HALT = 0X76,
			PREFIX_CB = 0XCB,
			DI = 0XF3,
			EI = 0XFB
		};
};

#endif // CPU_H
